import { PortForwardConfig } from "../hooks/hooks"
import { useKubernetesDataFlow } from "../hooks/useKubernetesDataFlow"
import { useFormState } from "../hooks/useFormState"
import { useNameDerivation } from "../hooks/useNameDerivation"
import { useConnectionForm } from "../hooks/useConnectionForm"
import { ErrorBanner } from "./ErrorBanner"
import { FormActions } from "./FormActions"
import { NameField } from "./NameField"
import { KubernetesForm } from "./KubernetesForm"
import { SshForm } from "./SshForm"

type AddConfigFormProps = {
  onAdd: (config: PortForwardConfig) => void
  onUpdate?: (oldName: string, newConfig: PortForwardConfig) => void
  onClose: () => void
  error?: string
  onClearError: () => void
  editingConfig?: {
    config: PortForwardConfig
    index: number
  } | null
}

let AddConfigForm = ({
  onAdd,
  onUpdate,
  onClose,
  error,
  onClearError,
  editingConfig,
}: AddConfigFormProps) => {

  let kubernetesData = useKubernetesDataFlow({
    setError: onClearError,
    editingConfig,
  })

  let formState = useFormState({
    onAdd,
    onUpdate,
    onClose,
    editingConfig,
  })

  let connectionForm = useConnectionForm({ editingConfig })

  let {
    selectedContext,
    selectedNamespace,
    selectedService,
    setSelectedContext,
    setSelectedNamespace,
    setSelectedService,
    contexts,
    namespaces,
    services,
    ports,
  } = kubernetesData

  let { handleCancel, isEditing, defaultValues } = formState
  let handleFormSubmit = formState.handleSubmit(selectedContext, selectedNamespace, selectedService)

  let {
    connectionType,
    setConnectionType,
    sshHost,
    setSshHost,
    sshPort,
    setSshPort,
    portsInput,
    setPortsInput,
  } = connectionForm

  let nameDerivation = useNameDerivation({
    connectionType,
    selectedContext,
    selectedNamespace,
    selectedService,
    sshHost,
    sshPort,
    portsInput,
    isEditing,
  })

  // Initialize name from editing config
  if (editingConfig && !nameDerivation.nameValue) {
    nameDerivation.initializeName(editingConfig.config.name)
  }

  return (
    <div className="add-form-modal">
      <div className="add-form">
        <h3>
          {isEditing ? "Edit Port Forward Configuration" : "Add New Port Forward Configuration"}
        </h3>

        <ErrorBanner error={error} onClearError={onClearError} />

        <div className="form-group">
          <label>Connection Type:</label>
          <div style={{ display: "flex", gap: "10px" }}>
            <button
              type="button"
              className={connectionType === "kubernetes" ? "tab-button active" : "tab-button"}
              onClick={() => setConnectionType("kubernetes")}
            >
              Kubernetes
            </button>
            <button
              type="button"
              className={connectionType === "ssh" ? "tab-button active" : "tab-button"}
              onClick={() => setConnectionType("ssh")}
            >
              SSH
            </button>
          </div>
        </div>

        <form onSubmit={handleFormSubmit}>
          <NameField
            nameValue={nameDerivation.nameValue}
            isNameManuallyChanged={nameDerivation.isNameManuallyChanged}
            previewName={nameDerivation.previewName}
            isEditing={isEditing}
            onNameChange={nameDerivation.updateName}
            onReset={nameDerivation.resetToAutoGenerated}
          />

          {connectionType === "kubernetes" ? (
            <KubernetesForm
              selectedContext={selectedContext}
              selectedNamespace={selectedNamespace}
              selectedService={selectedService}
              portsInput={portsInput}
              contexts={contexts}
              namespaces={namespaces}
              services={services}
              ports={ports}
              defaultLocalInterface={defaultValues.localInterface}
              editingConfig={editingConfig}
              onContextChange={setSelectedContext}
              onNamespaceChange={setSelectedNamespace}
              onServiceChange={setSelectedService}
              onPortsChange={setPortsInput}
            />
          ) : (
            <SshForm
              sshHost={sshHost}
              sshPort={sshPort}
              onSshHostChange={setSshHost}
              onSshPortChange={setSshPort}
            />
          )}

          <input
            type="hidden"
            name="forwardType"
            value={connectionType === "ssh" ? "Ssh" : "Kubectl"}
          />

          <FormActions isEditing={isEditing} onCancel={handleCancel} />
        </form>
      </div>
    </div>
  )
}

export default AddConfigForm

