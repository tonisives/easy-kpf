import { useState, useEffect } from "react"
import { deriveConfigName } from "./useFormState"

type UseNameDerivationProps = {
  connectionType: "kubernetes" | "ssh"
  selectedContext: string
  selectedNamespace: string
  selectedService: string
  sshHost: string
  sshPort: string
  portsInput: string
  isEditing: boolean
}

export let useNameDerivation = ({
  connectionType,
  selectedContext,
  selectedNamespace,
  selectedService,
  sshHost,
  sshPort,
  portsInput,
  isEditing,
}: UseNameDerivationProps) => {
  let [nameValue, setNameValue] = useState("")
  let [isNameManuallyChanged, setIsNameManuallyChanged] = useState(false)

  let previewName = (() => {
    if (connectionType === "ssh" && sshHost && sshPort) {
      return deriveConfigName("Ssh", "", sshHost, [sshPort])
    } else if (connectionType === "kubernetes" && selectedService && portsInput) {
      let portsArray = portsInput.split(",").map(p => p.trim()).filter(p => p.length > 0)
      if (portsArray.length > 0) {
        return deriveConfigName("Kubectl", selectedService, "", portsArray)
      }
    }
    return ""
  })()

  // Update name automatically when selections change
  useEffect(() => {
    if (!isEditing) {
      let derivedName = ""
      if (connectionType === "ssh") {
        if (sshHost && sshPort) {
          derivedName = deriveConfigName("Ssh", "", sshHost, [sshPort])
        } else if (sshHost) {
          derivedName = sshHost.split("@").pop() || sshHost
        }
      } else if (connectionType === "kubernetes") {
        if (selectedService && portsInput) {
          let portsArray = portsInput.split(",").map(p => p.trim()).filter(p => p.length > 0)
          if (portsArray.length > 0) {
            derivedName = deriveConfigName("Kubectl", selectedService, "", portsArray)
          } else {
            derivedName = selectedService
          }
        } else if (selectedService) {
          derivedName = selectedService
        } else if (selectedNamespace) {
          derivedName = selectedNamespace
        } else if (selectedContext) {
          derivedName = selectedContext
        }
      }

      // Always update name when selections change, and reset manual flag
      if (derivedName && derivedName !== nameValue) {
        setNameValue(derivedName)
        setIsNameManuallyChanged(false)
      }
    }
  }, [connectionType, selectedContext, selectedNamespace, selectedService, sshHost, sshPort, portsInput, isEditing, nameValue])

  let resetToAutoGenerated = () => {
    setNameValue("")
    setIsNameManuallyChanged(false)
  }

  let updateName = (newName: string) => {
    setNameValue(newName)
    setIsNameManuallyChanged(true)
  }

  let initializeName = (initialName: string) => {
    setNameValue(initialName)
    setIsNameManuallyChanged(true)
  }

  return {
    nameValue,
    isNameManuallyChanged,
    previewName,
    resetToAutoGenerated,
    updateName,
    initializeName,
  }
}